# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11jqjYcu9BCtL2QzBF0O-eqA28OOcUdJm
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

# app.py

# First, import the necessary libraries
import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load the saved model (this runs only once when the app starts)
try:
    model = joblib.load('model.pkl')
    # Use st.cache_resource to cache the model, so it loads faster on subsequent runs
    # @st.cache_resource
    # def load_model():
    #     return joblib.load('model.pkl')
    # model = load_model()
    st.success("Model loaded successfully!")
except Exception as e:
    st.error(f"Error loading model: {e}")
    model = None

# Set up the title and header of the app
st.title("CO2 Emissions Prediction ðŸš—")
st.markdown("Enter the vehicle's features to predict its CO2 emissions.")

# Create input fields for the user
# Based on the features from your DEEP1.ipynb notebook
st.header("Vehicle Specifications")

# Make sure the input order matches the order of the features used in training
# Example features from your notebook: ENGINESIZE, CYLINDERS, FUELCONSUMPTION_CITY, etc.
# Note: I am assuming your model takes these features in a specific order.
engine_size = st.number_input("Engine Size (L)", min_value=0.0, max_value=20.0, value=2.0)
cylinders = st.number_input("Cylinders", min_value=1, max_value=16, value=4)
fuel_consumption_city = st.number_input("Fuel Consumption City (L/100 km)", min_value=0.0, max_value=50.0, value=10.0)
fuel_consumption_hwy = st.number_input("Fuel Consumption Hwy (L/100 km)", min_value=0.0, max_value=50.0, value=7.0)
fuel_consumption_comb = st.number_input("Fuel Consumption Comb (L/100 km)", min_value=0.0, max_value=50.0, value=8.5)
fuel_consumption_comb_mpg = st.number_input("Fuel Consumption Comb (MPG)", min_value=0.0, max_value=100.0, value=30.0)

# Create a button to trigger the prediction
if st.button("Predict CO2 Emissions"):
    if model is not None:
        try:
            # Prepare the input data as a NumPy array for the model
            # Make sure the order is correct!
            input_data = np.array([[engine_size, cylinders, fuel_consumption_city,
                                    fuel_consumption_hwy, fuel_consumption_comb,
                                    fuel_consumption_comb_mpg]])

            # Make the prediction
            prediction = model.predict(input_data)

            # Display the result to the user
            st.subheader("Prediction Result:")
            st.success(f"The predicted CO2 emissions are: {prediction[0]:.2f} g/km")

        except Exception as e:
            st.error(f"Prediction failed: {e}")
    else:
        st.warning("Model is not loaded. Please check the file.")

